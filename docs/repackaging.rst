
Repackaging tool
================

In this section you will learn how to configure and use the repackaging tool to rewrite in an automatic way your applciations to use the Grab'n Run library.
The repackaging tool allows you to:

* Rewrite your application to use Grab'n Run secure API instead of the standard Android ones. This process is automatic and requires only a couple of settings from your side. 
* Granular control on the security policy that you want your application to follow at run time when performing dynamic code loading (e.g., validate all the dynamically loaded code against one cetificate, validate each container against a different certificate, decide whether to provide a default trusted certificate for all the not specified entry).

A prerequisite for using the tool is that you have cloned the source code of `Androguard <https://github.com/androguard/androguard>`_ on your machine.

Setup
-----

1. Go to the folder containing the repackaging tool script *repackPOC*

2. Open the file *repackagingTool.py*

3. Edit the variable ``androguard_location`` so to point to the local folder where you have a cloned copy of Androguard (e.g., "/home/luca/androguard/")

.. highlight:: bash

4. Save the file. Open a terminal and move to the repackaging tool script *repackPOC* directory and then install the required dependencies::

	$ cd <absolute_path_to_GNR_folder>/repackPOC
	$ pip install -r requirements.txt

5. Run the script::

	$ python repackagingTool.py

Configuration
-------------

.. highlight:: java

Before having the repackaging tool executed, some settings are required to configure how your application will be patched:

1. You have to select which application, in the form of an APK container, you want to patch.
2. You have to provide the JAR or APK containers used as sources for dynamic code loading.
3. You need to specify a security policy that will be used to evaluate whether the containers used as sources are genuine at runtime.

You can customize these settings easily thanks to a simple UI presented whenever the script is started.

Step 1: Select the application to patch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Select the application you want to patch to use the secure Grab'n Run APIs. Notice that this application must be a regular APK file, which is stored locally on your machine.

It is not required for this container to be aligned, or signed, but notice that you will *have to* sign, and then align the final application generated by the script in order to have it installed on the user's devices.

If you are not familiar on how to *sign*, and *align* an APK, you may want to check the third bullet point of the "Quick example of use" section in the ``README`` file of the Grab'n Run repository.

Step 2: Select the containers sources for DCL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next step is listing all the JAR, or APK containers used by your application as sources for dynamic code loading. Each container can be either stored locally (in this case indicate the absolute path on the file system), or remotely on an endpoint (in this case simply type the URL pointing to the file, and notice that both HTTP and HTTPS protocol are supported).

.. warning::
	In case of a JAR contianer, verify that you have already translated its content into Dalvik bytecode. Containers that have been gone through this process present a
	specific entry named ``classes.dex``. If you provide a container without such an entry, the repackaging tool will simply ignore it.

The screenshot below shows the first screen of the UI with an example of a feasible configuration for Step 1 and Step 2.

.. image:: images/RepackWin1.png

Step 3: Configure the security policy for the source containers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

